参考：https://www.cnblogs.com/crime/p/11025823.html
## django-allauth 常见设置选项
```
# 要求用户注册时必须填写email
ACCOUNT_EMAIL_REQUIRED = True 
# 注册中邮件验证方法: "强制(mandatory)"、 "可选(optional)" 或 "否(none)" 之一
(注册成功后，会发送一封验证邮件，用户必须验证邮箱后，才能登陆)
ACCOUNT_EMAIL_VERIFICATION (="optional") 
# 作用于第三方账号的注册
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional' / 'mandatory' / 'none'
# 邮件发送后的冷却时间(以秒为单位)
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN (=180) 
# 邮箱确认邮件的截止日期(天数)
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS (=3) 

# 指定要使用的登录方法(用户名、电子邮件地址或两者之一)
ACCOUNT_AUTHENTICATION_METHOD (="username" | "email" | "username_email") 
# 登录尝试失败的次数
ACCOUNT_LOGIN_ATTEMPTS_LIMIT (=5) 
# 从上次失败的登录尝试，用户被禁止尝试登录的持续时间
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT (=300) 
# 更改为True，用户一旦确认他们的电子邮件地址，就会自动登录
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION (=False) 

# 更改或设置密码后是否自动退出
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE (=False) 
# 更改为True，用户将在重置密码后自动登录
ACCOUNT_LOGIN_ON_PASSWORD_RESET (=False) 
# 控制会话的生命周期，可选项还有: "False" 和 "True"
ACCOUNT_SESSION_REMEMBER (=None) 

# 用户注册时是否需要输入邮箱两遍
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE (=False) 
# 用户注册时是否需要用户输入两遍密码
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE (=True) 
# 用户不能使用的用户名列表
ACCOUNT_USERNAME_BLACKLIST (=[]) 
# 加强电子邮件地址的唯一性
ACCOUNT_UNIQUE_EMAIL (=True) 
# 用户名允许的最小长度的整数
ACCOUNT_USERNAME_MIN_LENGTH (=1) 
# 使用从社交账号提供者检索的字段(如用户名、邮件)来绕过注册表单
SOCIALACCOUNT_AUTO_SIGNUP (=True) 

# 设置登录后跳转链接
LOGIN_REDIRECT_URL (="/") 
# 设置退出登录后跳转链接
ACCOUNT_LOGOUT_REDIRECT_URL (="/")
# 用户登出是否需要确认确认(True表示直接退出，不用确认；False表示需要确认)
ACCOUNT_LOGOUT_ON_GET (=True)
```
# docker测试
## 删除镜像
```shell
# 启动所有镜像
sudo docker start $(sudo docker ps -a -q)

# stop停止所有容器
sudo docker stop $(sudo docker ps -a -q)

# remove删除所有容器
sudo docker rm $(sudo docker ps -a -q)

# docker中 删除所有的镜像
sudo docker rmi $(sudo docker images | awk '{print $3}' |tail -n +2)
```

## docker镜像
```angular2html
sudo docker run -it --name python3.7 python:3.7 bash
sudo docker cp /share/firm/ ee5571ba4d5a:/home
```
django运行命令
```shell
python manage.py runserver 0.0.0.0:5000
```

部署参考：https://blog.csdn.net/weixin_45457042/article/details/127194130

# 数据备份恢复
参考：https://blog.csdn.net/z_johnny/article/details/104915016/
## 使用方法

```

Usage: migrate [-b] [-c] [-r <*.sql.gz> <*.tar.gz>] [-t <"0 3 * * *">]

  -b,   backup mysql and media
  -c,   clean old-to-date backup
  -r,   restore mysql and media
  -t,   set cron schedule expressions
```

- `sh migrate -b` 开始备份
- `sh migrate -c` 开始清理旧文件
- `sh migrate -r *.sql.gz *.tar.gz` 开始恢复，注意顺序
- `sh migrate -t "0 3 * * *"` 定时备份规则

# 备份

从我的 `Django` 项目来看，我要迁移的数据无非就是这两个

1. `MySQL` 数据库的备份
2. `media` 媒体文件，图片、视频、音乐之类的

## 操作

```bash
sh migrate -b
```

如果脚本保持默认，即将 `MySQL备份（*.sql.gz）` 和 `media备份（*.tar.gz）` 存入 `backup/****-**-**/文件夹中`，请按需修改

## 目录

```shell
.
└── backup/
    ├── 2019-12-11/
    │   ├── media-20191211-1235.tar.gz
    │   └── website-20191211-1235.sql.gz
    ├── 2019-12-12/
    │   ├── media-20191212-0326.tar.gz
    │   └── website-20191212-0326.sql.gz
    └── 2019-12-13/
        ├── media-20191213-1624.tar.gz
        └── website-20191213-1624.sql.gz
```

# 清理

因为定时备份会占用很大的硬盘空间，而硬盘空间又是有限的，所以要定时清理，当前默认只保存3天的备份

```bash
sh migrate -c
```

# 开启定时备份

我使用的是 `Linux` 自带的 `crontab` 定时任务。

定时备份是一个好习惯，不要等到了服务器崩了的时候再去备份，那样可能会很麻烦。

以下操作 **需要使用 `root` 用户**

```
sh migrate -t "0 3 * * *"
```

- “0 3 * * *” 是备份的周期，表示每天凌晨3点备份一次，参考时间规则查询网站：[crontab guru](https://crontab.guru/)

原理：

1. 输入`crontab -e`
2. 添加内容：`0 3 * * * cd 目录 && sh migrate.sh -b -c`
3. 保存退出

# 备份文件的导出和导入

## 导出

手动导出或者利用 `e-mail` 将备份文件定时发到自己邮箱，这个按需使用吧，`基于Python的邮件模块`可以参考我的 [基于Python的邮件发送模块封装](https://github.com/hongweifuture/HwTTK/tree/master/HwSendEmail)，只要配置邮箱基本信息就可发送。

## 导入

1. 放在项目根目录，`sql` 无所谓，但 `media` 还是要的，所以干脆都放相同目录
2. 项目容器运行，可用 `docker-compose ps` 查看

目录：

```
.
├── django
├── migrate.sh
├── docker-compose.yml
├── media-20191212-0326.tar.gz
├── nginx
└── website-20191212-0326.sql.gz
```

# 恢复

在一台新服务器上恢复项目，只需安装 `docker` 和 `docker-compose` 后，运行容器，恢复数据，即可完成迁移的全部工作

```shell
sh migrate -r *.sql.gz *.tar.gz
```

自动 `导入sql文件` 和 `解压静态媒体文件`

好了，`导入文件`，`恢复SQL和mdeia`，**两步**就完成了服务器的迁移，用的了五分钟？那在导入文件的时间一定用了四分五十九秒~~

就这样，神奇的事情发生了，一切数据全部保留~ enjoy~~

- 升级django版本2.0到2.1.5

- 完成注册登录界面美化

- 完成github第三方登录，微信登录待完善

- update layui版本到2.7.6
- 完成order app 基本功能
- 完成admin后台order退款手动核查
- 完成logging配置
- 完成邮箱发送功能
